// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobuf_types/pparameters.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:top.tvm_engine.parameters.PReturnResult)
pub struct PReturnResult {
    // message fields
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.status)
    pub status: u32,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.status_data)
    pub status_data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.gas_used)
    pub gas_used: u64,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.logs)
    pub logs: ::std::vec::Vec<preturn_result::PLog>,
    // special fields
    // @@protoc_insertion_point(special_field:top.tvm_engine.parameters.PReturnResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PReturnResult {
    fn default() -> &'a PReturnResult {
        <PReturnResult as ::protobuf::Message>::default_instance()
    }
}

impl PReturnResult {
    pub fn new() -> PReturnResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &PReturnResult| { &m.status },
            |m: &mut PReturnResult| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status_data",
            |m: &PReturnResult| { &m.status_data },
            |m: &mut PReturnResult| { &mut m.status_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_used",
            |m: &PReturnResult| { &m.gas_used },
            |m: &mut PReturnResult| { &mut m.gas_used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "logs",
            |m: &PReturnResult| { &m.logs },
            |m: &mut PReturnResult| { &mut m.logs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PReturnResult>(
            "PReturnResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PReturnResult {
    const NAME: &'static str = "PReturnResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_uint32()?;
                },
                18 => {
                    self.status_data = is.read_bytes()?;
                },
                24 => {
                    self.gas_used = is.read_uint64()?;
                },
                34 => {
                    self.logs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.status);
        }
        if !self.status_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.status_data);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.gas_used);
        }
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != 0 {
            os.write_uint32(1, self.status)?;
        }
        if !self.status_data.is_empty() {
            os.write_bytes(2, &self.status_data)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(3, self.gas_used)?;
        }
        for v in &self.logs {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PReturnResult {
        PReturnResult::new()
    }

    fn clear(&mut self) {
        self.status = 0;
        self.status_data.clear();
        self.gas_used = 0;
        self.logs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PReturnResult {
        static instance: PReturnResult = PReturnResult {
            status: 0,
            status_data: ::std::vec::Vec::new(),
            gas_used: 0,
            logs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PReturnResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PReturnResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PReturnResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PReturnResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PReturnResult`
pub mod preturn_result {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:top.tvm_engine.parameters.PReturnResult.PU256)
    pub struct PU256 {
        // message fields
        // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.PU256.data)
        pub data: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:top.tvm_engine.parameters.PReturnResult.PU256.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PU256 {
        fn default() -> &'a PU256 {
            <PU256 as ::protobuf::Message>::default_instance()
        }
    }

    impl PU256 {
        pub fn new() -> PU256 {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "data",
                |m: &PU256| { &m.data },
                |m: &mut PU256| { &mut m.data },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PU256>(
                "PReturnResult.PU256",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PU256 {
        const NAME: &'static str = "PU256";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.data = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if !self.data.is_empty() {
                my_size += ::protobuf::rt::bytes_size(1, &self.data);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if !self.data.is_empty() {
                os.write_bytes(1, &self.data)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PU256 {
            PU256::new()
        }

        fn clear(&mut self) {
            self.data.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PU256 {
            static instance: PU256 = PU256 {
                data: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PU256 {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PReturnResult.PU256").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PU256 {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PU256 {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:top.tvm_engine.parameters.PReturnResult.PLog)
    pub struct PLog {
        // message fields
        // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.PLog.address)
        pub address: ::protobuf::MessageField<super::super::pbasic::PAddress>,
        // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.PLog.topics)
        pub topics: ::std::vec::Vec<PU256>,
        // @@protoc_insertion_point(field:top.tvm_engine.parameters.PReturnResult.PLog.data)
        pub data: ::std::vec::Vec<u8>,
        // special fields
        // @@protoc_insertion_point(special_field:top.tvm_engine.parameters.PReturnResult.PLog.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PLog {
        fn default() -> &'a PLog {
            <PLog as ::protobuf::Message>::default_instance()
        }
    }

    impl PLog {
        pub fn new() -> PLog {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::super::pbasic::PAddress>(
                "address",
                |m: &PLog| { &m.address },
                |m: &mut PLog| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "topics",
                |m: &PLog| { &m.topics },
                |m: &mut PLog| { &mut m.topics },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "data",
                |m: &PLog| { &m.data },
                |m: &mut PLog| { &mut m.data },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PLog>(
                "PReturnResult.PLog",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PLog {
        const NAME: &'static str = "PLog";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.address)?;
                    },
                    18 => {
                        self.topics.push(is.read_message()?);
                    },
                    26 => {
                        self.data = is.read_bytes()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.address.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            for value in &self.topics {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            if !self.data.is_empty() {
                my_size += ::protobuf::rt::bytes_size(3, &self.data);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.address.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            for v in &self.topics {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            };
            if !self.data.is_empty() {
                os.write_bytes(3, &self.data)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PLog {
            PLog::new()
        }

        fn clear(&mut self) {
            self.address.clear();
            self.topics.clear();
            self.data.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PLog {
            static instance: PLog = PLog {
                address: ::protobuf::MessageField::none(),
                topics: ::std::vec::Vec::new(),
                data: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PLog {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PReturnResult.PLog").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PLog {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PLog {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:top.tvm_engine.parameters.PCallArgs)
pub struct PCallArgs {
    // message fields
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PCallArgs.sender_address)
    pub sender_address: ::protobuf::MessageField<super::pbasic::PAddress>,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PCallArgs.recver_address)
    pub recver_address: ::protobuf::MessageField<super::pbasic::PAddress>,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PCallArgs.value)
    pub value: u64,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PCallArgs.input)
    pub input: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:top.tvm_engine.parameters.PCallArgs.gas_limit)
    pub gas_limit: u64,
    // special fields
    // @@protoc_insertion_point(special_field:top.tvm_engine.parameters.PCallArgs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PCallArgs {
    fn default() -> &'a PCallArgs {
        <PCallArgs as ::protobuf::Message>::default_instance()
    }
}

impl PCallArgs {
    pub fn new() -> PCallArgs {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pbasic::PAddress>(
            "sender_address",
            |m: &PCallArgs| { &m.sender_address },
            |m: &mut PCallArgs| { &mut m.sender_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::pbasic::PAddress>(
            "recver_address",
            |m: &PCallArgs| { &m.recver_address },
            |m: &mut PCallArgs| { &mut m.recver_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &PCallArgs| { &m.value },
            |m: &mut PCallArgs| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &PCallArgs| { &m.input },
            |m: &mut PCallArgs| { &mut m.input },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_limit",
            |m: &PCallArgs| { &m.gas_limit },
            |m: &mut PCallArgs| { &mut m.gas_limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PCallArgs>(
            "PCallArgs",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PCallArgs {
    const NAME: &'static str = "PCallArgs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sender_address)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.recver_address)?;
                },
                24 => {
                    self.value = is.read_uint64()?;
                },
                34 => {
                    self.input = is.read_bytes()?;
                },
                40 => {
                    self.gas_limit = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sender_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.recver_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value);
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.input);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.gas_limit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sender_address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.recver_address.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.value != 0 {
            os.write_uint64(3, self.value)?;
        }
        if !self.input.is_empty() {
            os.write_bytes(4, &self.input)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(5, self.gas_limit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PCallArgs {
        PCallArgs::new()
    }

    fn clear(&mut self) {
        self.sender_address.clear();
        self.recver_address.clear();
        self.value = 0;
        self.input.clear();
        self.gas_limit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PCallArgs {
        static instance: PCallArgs = PCallArgs {
            sender_address: ::protobuf::MessageField::none(),
            recver_address: ::protobuf::MessageField::none(),
            value: 0,
            input: ::std::vec::Vec::new(),
            gas_limit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PCallArgs {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PCallArgs").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PCallArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PCallArgs {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20protobuf_types/pparameters.proto\x12\x19top.tvm_engine.parameters\
    \x1a\x1bprotobuf_types/pbasic.proto\"\xe2\x02\n\rPReturnResult\x12\x16\n\
    \x06status\x18\x01\x20\x01(\rR\x06status\x12\x1f\n\x0bstatus_data\x18\
    \x02\x20\x01(\x0cR\nstatusData\x12\x19\n\x08gas_used\x18\x03\x20\x01(\
    \x04R\x07gasUsed\x12A\n\x04logs\x18\x04\x20\x03(\x0b2-.top.tvm_engine.pa\
    rameters.PReturnResult.PLogR\x04logs\x1a\x1b\n\x05PU256\x12\x12\n\x04dat\
    a\x18\x01\x20\x01(\x0cR\x04data\x1a\x9c\x01\n\x04PLog\x128\n\x07address\
    \x18\x01\x20\x01(\x0b2\x1e.top.tvm_engine.basic.PAddressR\x07address\x12\
    F\n\x06topics\x18\x02\x20\x03(\x0b2..top.tvm_engine.parameters.PReturnRe\
    sult.PU256R\x06topics\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\"\
    \xe2\x01\n\tPCallArgs\x12E\n\x0esender_address\x18\x01\x20\x01(\x0b2\x1e\
    .top.tvm_engine.basic.PAddressR\rsenderAddress\x12E\n\x0erecver_address\
    \x18\x02\x20\x01(\x0b2\x1e.top.tvm_engine.basic.PAddressR\rrecverAddress\
    \x12\x14\n\x05value\x18\x03\x20\x01(\x04R\x05value\x12\x14\n\x05input\
    \x18\x04\x20\x01(\x0cR\x05input\x12\x1b\n\tgas_limit\x18\x05\x20\x01(\
    \x04R\x08gasLimitJ\xe1\x08\n\x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\x07$\n\x08\n\x01\x02\x12\x03\
    \x04\x08!\n\n\n\x02\x04\0\x12\x04\x06\0\x15\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x06\x08\x15\n\x0c\n\x04\x04\0\x03\0\x12\x04\x07\x04\t\x05\n\x0c\n\
    \x05\x04\0\x03\0\x01\x12\x03\x07\x0c\x11\n+\n\x06\x04\0\x03\0\x02\0\x12\
    \x03\x08\x08\x17\"\x1c\x20use\x20bytes\x20=\x20U256\x20=\x20[u8;32]\n\n\
    \x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04\x08\x08\x07\x13\n\x0e\n\x07\x04\
    \0\x03\0\x02\0\x05\x12\x03\x08\x08\r\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\
    \x12\x03\x08\x0e\x12\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x08\x15\
    \x16\n\x0c\n\x04\x04\0\x03\x01\x12\x04\x0b\x04\x0f\x05\n\x0c\n\x05\x04\0\
    \x03\x01\x01\x12\x03\x0b\x0c\x10\n\r\n\x06\x04\0\x03\x01\x02\0\x12\x03\
    \x0c\x08#\n\x0f\n\x07\x04\0\x03\x01\x02\0\x04\x12\x04\x0c\x08\x0b\x12\n\
    \x0e\n\x07\x04\0\x03\x01\x02\0\x06\x12\x03\x0c\x08\x16\n\x0e\n\x07\x04\0\
    \x03\x01\x02\0\x01\x12\x03\x0c\x17\x1e\n\x0e\n\x07\x04\0\x03\x01\x02\0\
    \x03\x12\x03\x0c!\"\n\r\n\x06\x04\0\x03\x01\x02\x01\x12\x03\r\x08\"\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x01\x04\x12\x03\r\x08\x10\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x01\x06\x12\x03\r\x11\x16\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x01\x12\x03\r\x17\x1d\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03\r\
    \x20!\n\r\n\x06\x04\0\x03\x01\x02\x02\x12\x03\x0e\x08\x17\n\x0f\n\x07\
    \x04\0\x03\x01\x02\x02\x04\x12\x04\x0e\x08\r\"\n\x0e\n\x07\x04\0\x03\x01\
    \x02\x02\x05\x12\x03\x0e\x08\r\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x01\x12\
    \x03\x0e\x0e\x12\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x03\x12\x03\x0e\x15\
    \x16\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x04\x16\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x11\x04\x0f\x05\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x11\x04\
    \n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0b\x11\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x11\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x12\x04\x1a\
    \n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x12\x04\x11\x16\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x12\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x12\
    \n\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12\x18\x19\n\x0b\n\x04\x04\
    \0\x02\x02\x12\x03\x13\x04\x18\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x13\
    \x04\x12\x1a\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x13\x04\n\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x13\x0b\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x13\x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x14\x04\x1b\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\x14\r\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x14\x12\x16\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x14\x19\x1a\n\n\n\x02\x04\x01\x12\
    \x04\x17\0\x1d\x01\n\n\n\x03\x04\x01\x01\x12\x03\x17\x08\x11\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x18\x04&\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x18\
    \x04\x17\x13\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x18\x04\x12\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x18\x13!\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x18$%\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x19\x04&\n\r\n\x05\
    \x04\x01\x02\x01\x04\x12\x04\x19\x04\x18&\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03\x19\x04\x12\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x13\
    !\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x19$%\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x1a\x04\x15\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x1a\x04\
    \x19&\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\x1a\x0b\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\x1a\x13\x14\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x1b\x04\x14\n\r\n\
    \x05\x04\x01\x02\x03\x04\x12\x04\x1b\x04\x1a\x15\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03\x1b\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x1b\n\
    \x0f\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x1b\x12\x13\n\x0b\n\x04\x04\
    \x01\x02\x04\x12\x03\x1c\x04\x19\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04\
    \x1c\x04\x1b\x14\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x1c\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x04\x01\x12\x03\x1c\x0b\x14\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03\x1c\x17\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::pbasic::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(PReturnResult::generated_message_descriptor_data());
            messages.push(PCallArgs::generated_message_descriptor_data());
            messages.push(preturn_result::PU256::generated_message_descriptor_data());
            messages.push(preturn_result::PLog::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
